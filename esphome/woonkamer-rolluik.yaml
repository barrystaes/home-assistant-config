substitutions:
  name: woonkamer-rolluik
  friendly_name: "Woonkamer Rolluik"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"

esp8266:
  board: esp01_1m
  
# Sonoff TX T2EU2C (wall switch)
# First flash: short R19 to GND or pin ( https://github.com/arendst/Sonoff-Tasmota/issues/5918 ) of ESP with GND, used 3.3V FTDI
# Pinout: https://esphome.io/devices/sonoff_t1_uk_3gang_v1.1.html


# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "2f0c3761362e0a180f898e5efa295ddd"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "broodje_${name}"
    password: !secret fallback_ap_password

captive_portal:

sensor:
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${friendly_name} Uptime"

binary_sensor:
- platform: gpio
  pin:
    number: GPIO0
    inverted: true
  id: button
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover).current_operation == COVER_OPERATION_IDLE) {
            // Cover is idle, if at one end change direction
            if (id(my_cover).position < 0.02) {
              id(my_cover).open();
            } else if (id(my_cover).position > 0.98) {
              id(my_cover).close();
            } else {
              // check last direction and either open or close cover.
              if (id(var_last_closing)) {
                id(my_cover).open();
              } else {
                id(my_cover).close();
              }
            }
          } else {
            // Cover is opening/closing, remember the direction.
            id(var_last_closing) = (id(my_cover).current_operation == COVER_OPERATION_CLOSING);
            
            // Stop it.
            id(my_cover).stop();
          }

switch:
- platform: gpio
  pin: GPIO12
  interlock: &interlock [open_cover, close_cover]
  id: open_cover
- platform: gpio
  pin: GPIO5
  interlock: *interlock
  id: close_cover

cover:
- platform: time_based
  name: "${friendly_name}"
  id: my_cover
  open_action:
    - switch.turn_on: open_cover
  open_duration: 18s
  close_action:
    - switch.turn_on: close_cover
  close_duration: 17s
  # actually 45s would be more than enough for closing but lets keep it the same
  stop_action:
    - switch.turn_off: open_cover
    - switch.turn_off: close_cover
    
globals:
  - id: var_last_closing
    type: bool
    restore_value: no
    initial_value: 'false'
  
text_sensor:
  - platform: version
    name: "${friendly_name} Firmware version"

output:
# Register the blue LED as a dimmable output ....
- platform: esp8266_pwm
  id: blue_led
  pin: GPIO13
  inverted: True

light:
# ... and then make a light out of it.
- platform: monochromatic
  name: "${friendly_name} Blue LED"
  output: blue_led
